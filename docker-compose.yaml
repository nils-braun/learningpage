version: '3'
services:
  # Backend Image for the API
  backend:
    image: learningpage-backend:local-dev
    build: backend
    environment:
      # Prefix for the API webservice. Has to be the same as the service name in the jupyterhub config.
      JUPYTERHUB_SERVICE_PREFIX: /services/learningpage/
      # Token to access the jupyterhub API. Has to be the same as in the jupyterhub config.
      JUPYTERHUB_API_TOKEN: very-secret-very-safe
      # Where to find the jupyterhub API
      JUPYTERHUB_API_URL: http://jupyterhub:8081/hub/api
      # sqlalchemy string for the content database
      CONTENT_DATABASE_STRING: postgres://content:content@postgres/content
      # sqlalchemy string for the nbgrader database
      GRADER_DATABASE_STRING: postgres://grader:grader@postgres/grader
      # Where to look for the userhome directories
      USER_BASE_FOLDER: /userhomes
      # Where to store the submissions and feedbacks
      STORAGE_BASE_FOLDER: /storage
      # Where to share data with the nbgrader
      GRADER_BASE_FOLDER: /grader
    volumes:
      # shared volume for the nbgrader content
      - grader_content:/grader
      # for local testing: bind-mount the app folder
      - ./backend:/app:ro
      # Where to find the home of the users, for submission
      - "user_homes:/userhomes:ro"
      # Where to store all submissions
      - "storage:/storage"
    depends_on:
      # Wait for postgres to come up, otherwise the database is not ready
      - postgres
    restart: unless-stopped
  frontend:
    image: learningpage-frontend:local-dev
    build: frontend
    command: npm run dev -- -H 0.0.0.0
    depends_on:
      - backend
    volumes:
      # for local development mount frontend folder
      - ./frontend/src:/app/src:cached
    environment:
      BASE_PATH: /services/learningpage-frontend
    restart: unless-stopped
  # Jupyterhub to control it all
  jupyterhub:
    image: custom-jupyterhub:local-dev
    build: jupyterhub
    ports:
      # only exchange to the outside: the main hub port (API not exposed)
      - "8000:8000"
    volumes:
      # Where to store the homes of the users
      - "user_homes:/home"
    restart: unless-stopped
  # The database server to store the nbgrader and content database
  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres-password
    volumes:
      # Init script to create the two databases
      - "./postgres/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh:ro"
  # A notebook server accessible by the graders only, to manage and grade assignments
  grader-notebook:
    image: grader-notebook:local-dev
    build: grader-notebook
    environment:
      # Prefix for the grader webservice. Has to be the same as the service name in the jupyterhub config.
      JUPYTERHUB_SERVICE_PREFIX: /services/grader-notebook/
      # Token to access the jupyterhub API. Has to be the same as in the jupyterhub config.
      JUPYTERHUB_API_TOKEN: even-more-secret-key
      # Where to find the jupyterhub API
      JUPYTERHUB_API_URL: http://jupyterhub:8081/hub/api
      # OAuth client ID. Has to be the same as in the jupyterhub config.
      JUPYTERHUB_CLIENT_ID: grader-notebook
      # sqlalchemy string for the nbgrader database
      GRADER_DATABASE_STRING: postgres://grader:grader@postgres/grader
    volumes:
      # shared volume for the nbgrader content
      - grader_content:/home/jovyan/content
    depends_on:
      # Wait for postgres to come up, otherwise the database is not ready
      - postgres

volumes:
  grader_content:
  user_homes:
  storage: